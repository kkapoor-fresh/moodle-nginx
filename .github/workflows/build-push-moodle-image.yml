name: üî® Build and publish Moodle images to Artifactory

# concurrency:
#   group: ${{ github.ref }}
#   cancel-in-progress: true




env:
  APP: moodle
  USER: ${{ github.actor }}
  MOODLE_DOCKER_FILE_PATH: ./Moodle.Dockerfile
  

on:
  workflow_call:
# on:
#   push:
#     branches:
#       - dev
#       #- test
#       #- prod
#     paths:
#       - 'Moodle.Dockerfile'
#       - '**/config/moodle/**'
#       - '**/workflows/build-push-moodle-image.yml'
#   pull_request:
#     branches:
#       - dev
#       #- test
#       #- prod
#     paths:
#       - 'Moodle.Dockerfile'
#       - '**/config/moodle/**'
#       - '**/workflows/build-push-moodle-image.yml'
jobs:
  #Print variables for logging and debugging purposes
  # getEnvFile:
  #   name: Set Env file
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get Env file       
  #       run: |
  #         echo "Import .env to $GITHUB_ENV (ignoring any commented [#] or empty lines)"
  #         {
  #           echo 'ENV_FILE_OUTPUT<<EOF'
  #           grep -v '^#' ./example.env | grep -v '^$'
  #           echo EOF
  #         } >> "$GITHUB_ENV"

  #         echo "PHP image is: " {{env.PHP_IMAGE}}
         

  checkEnv:
    environment: dev
    name: üìã Environment Check
    runs-on: ubuntu-latest
    steps:
      - name: Check Env Vars
        run: |
          echo Building ${{ env.APP }}:${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}
  

  # Build Images

  build-images:
    name: 'üî® Build Moodle image and push to Artifactory'
    needs: [checkEnv]
    runs-on: ubuntu-latest
    #environment: dev
  # if: ${{ needs.checkEnv.SKIP_BUILDS != 'YES' }} && (github.ref_name == 'dev' || github.ref_name == 'test' || github.ref_name == 'prod')
    if: ${{ vars.SKIP_BUILD!= 'YES' }} && (github.ref_name == 'dev' || github.ref_name == 'test' || github.ref_name == 'prod')
    steps:
      # Checkout the PR branch
      - name: üì§ Checkout Target Branch
        uses: actions/checkout@v2


      - name: Get Env file       
        run: |
                echo "Import .env to $GITHUB_ENV (ignoring any commented [#] or empty lines)"
                {
                  echo 'ENV_FILE_OUTPUT<<EOF'
                  grep -v '^#' ./example.env | grep -v '^$'|sed 's/^ *//'
                  echo EOF
                } >> "$GITHUB_ENV"

      - name: Print ENV
        run: |
         echo "PHP image is: " ${{ env.PHP_IMAGE }}


      # Login to Artifactory
      - name: üîë Login to Artifactory
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: üõ†Ô∏è Pull PHP base image
        run: |
          docker pull ${{env.PHP_IMAGE}}
          docker tag ${{env.PHP_IMAGE}} ${{ secrets.ARTIFACTORY_URL }}/${{env.PHP_IMAGE}}
          docker push ${{ secrets.ARTIFACTORY_URL }}/${{env.PHP_IMAGE}}

      - name: üõ†Ô∏è Build Moodle Image and push to Artifactory
        run: docker buildx build -t ${{ secrets.ARTIFACTORY_URL }}/${{ env.APP }}:${{ env.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }} --output=type=image,push=true --push -f ${{ env.MOODLE_DOCKER_FILE_PATH }} .

