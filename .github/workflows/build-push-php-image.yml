name: üî® Build PHP and push to Artifactory

# concurrency:
#   group: ${{ github.ref }}
#   cancel-in-progress: true

env:
  APP: php
  USER: ${{ github.actor }}

on:
  workflow_call:
    secrets:
      ARTIFACTORY_URL:
        required: true
      ARTIFACTORY_USER:
        required: true
      ARTIFACTORY_PASSWORD:
        required: true

# on:
#   push:
#     branches:
#       - dev
#       #- test
#       #- prod
#     paths:
#       - 'PHP.Dockerfile'
#       - '**/config/**'
#       - '**/workflows/build-moodle-jfrog.yml'
#   pull_request:
#     branches:
#       - dev
#       #- test
#       #- prod
#     paths:
#       - '**.Dockerfile'
#       - '**/config/**'
#       - '**/workflows/build-moodle-jfrog.yml'
jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: üìã Environment Check
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Check Env Vars
        run: |
         echo Building ${{ env.APP }}:${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}

  # Build Images

  build-images:
    name: 'üî® Build Moodle and PHP images'
    needs: [checkEnv]
    runs-on: ubuntu-latest
    environment: dev
    #if: ${{ needs.checkEnv.SKIP_BUILDS != 'YES' }} && (github.ref_name == 'dev' || github.ref_name == 'test' || github.ref_name == 'prod')
    if: ${{ vars.SKIP_BUILD!= 'YES' }} && (github.ref_name == 'dev' || github.ref_name == 'test' || github.ref_name == 'prod')
    steps:
      # Checkout the PR branch
      - name: üì§ Checkout Target Branch
        uses: actions/checkout@v2
      
      - name: Import env file
        id: dotenv
        uses: falti/dotenv-action@v1.1
        with:
          path: example.env

      # Login to Artifactory
      - name: üîë Login to Artifactory
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      # Pull latest PHP base image and push to Artifactory
      - name: üõ†Ô∏è Pull PHP base image and push to Artifactory
        run: |
          docker pull ${{steps.dotenv.outputs.PHP_IMAGE}}
          docker tag ${{steps.dotenv.outputs.PHP_IMAGE}} ${{ secrets.ARTIFACTORY_URL }}/${{steps.dotenv.outputs.PHP_IMAGE}}
          docker push ${{ secrets.ARTIFACTORY_URL }}/${{steps.dotenv.outputs.PHP_IMAGE}}

      # Build PHP Image and push to Artifactory
      - name: üõ†Ô∏è Build PHP Image and push to Artifactory
        run: docker buildx build -t ${{ secrets.ARTIFACTORY_URL }}/${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}:${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }} --output=type=image,push=true --push -f ${{ steps.dotenv.outputs.PHP_DOCKER_FILE_PATH }} .
